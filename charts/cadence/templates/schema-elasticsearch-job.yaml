{{- if and .Values.schema.elasticSearchJob.enabled .Values.config.persistence.elasticsearch.enabled -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cadence.fullname" . }}-schema-elasticsearch
  labels:
    {{- include "cadence.labels" . | nindent 4 }}
    app.kubernetes.io/component: schema-elasticsearch
spec:
  ttlSecondsAfterFinished: 60
  template:
    metadata:
      labels:
        {{- include "cadence.labels" . | nindent 8 }}
        app.kubernetes.io/component: schema-elasticsearch
    spec:
      {{- if $.Values.serviceAccount.create }}
      serviceAccountName: {{ include "cadence.serviceAccountName" $ }}
      {{- end }}
      {{- $globalImagePullSecrets := $.Values.global.imagePullSecrets | default list }}
      {{- $schemaImagePullSecrets := $.Values.frontend.imagePullSecrets | default list }}
      {{- $mergedImagePullSecrets := concat $globalImagePullSecrets $schemaImagePullSecrets }}
      {{- if $mergedImagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $mergedImagePullSecrets | nindent 8 }}
      {{- end }}
      {{- $globalNodeSelector := $.Values.global.nodeSelector | default dict }}
      {{- $schemaNodeSelector := $.Values.schema.elasticSearchJob.nodeSelector | default $globalNodeSelector }}
      {{- if $schemaNodeSelector }}
      nodeSelector:
        {{- toYaml $schemaNodeSelector | nindent 8 }}
      {{- end }}
      {{- $globalAffinity := $.Values.global.affinity | default dict }}
      {{- $schemaAffinity := $.Values.schema.elasticSearchJob.affinity | default $globalAffinity }}
      {{- if $schemaAffinity }}
      affinity:
        {{- toYaml $schemaAffinity | nindent 8 }}
      {{- end }}
      {{- $globalTolerations := $.Values.global.tolerations | default list }}
      {{- $schemaTolerations := $.Values.schema.elasticSearchJob.tolerations | default $globalTolerations }}
      {{- if $schemaTolerations }}
      tolerations:
        {{- toYaml $schemaTolerations | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-elasticsearch
        image: {{ $.Values.schema.checkSchema.elasticsearch.image.repository | default "alpine/curl" }}:{{ $.Values.schema.checkSchema.elasticsearch.image.tag | default "latest" }}
        imagePullPolicy: {{ $.Values.schema.checkSchema.elasticsearch.image.pullPolicy | default "IfNotPresent" }}
        command:
          - sh
          - -c
          - |
            echo "Starting Elasticsearch schema validation..."

            # Build Elasticsearch connection parameters
            build_es_connection() {
                # Determine protocol - allow override from values or default based on TLS
                if [ -n "$ES_PROTOCOL" ]; then
                    PROTOCOL="$ES_PROTOCOL"
                elif [ "$TLS_ENABLED" = "true" ]; then
                    PROTOCOL="https"
                else
                    PROTOCOL="http"
                fi
                
                # Build curl options for TLS
                CURL_OPTS=""
                if [ "$TLS_ENABLED" = "true" ]; then
                    # Configure SSL verification based on host verification setting
                    if [ "$ENABLE_HOST_VERIFICATION" = "false" ]; then
                        CURL_OPTS="$CURL_OPTS -k"
                    fi
                    
                    # Add CA certificate if provided
                    if [ -n "$SSL_CA_FILE" ]; then
                        CURL_OPTS="$CURL_OPTS --cacert $SSL_CA_FILE"
                    fi
                    
                    # Add client certificate for mutual TLS if provided
                    if [ -n "$SSL_CLIENT_CERT" ] && [ -n "$SSL_CLIENT_KEY" ]; then
                        CURL_OPTS="$CURL_OPTS --cert $SSL_CLIENT_CERT --key $SSL_CLIENT_KEY"
                    fi
                    
                    # Override server name if specified
                    if [ -n "$SSL_SERVER_NAME" ]; then
                        CURL_OPTS="$CURL_OPTS --resolve $SSL_SERVER_NAME:$ES_PORT:$ES_HOST"
                    fi
                    
                    # Additional TLS options
                    if [ "$REQUIRE_CLIENT_AUTH" = "true" ]; then
                        # Client auth is required, ensure we have client cert
                        if [ -z "$SSL_CLIENT_CERT" ] || [ -z "$SSL_CLIENT_KEY" ]; then
                            echo "Error: Client authentication required but client certificate/key not provided"
                            exit 1
                        fi
                    fi
                fi
                
                # Add authentication if user/password provided
                if [ -n "$ES_USER" ] && [ -n "$ES_PWD" ]; then
                    CURL_OPTS="$CURL_OPTS -u $ES_USER:$ES_PWD"
                fi
                
                # Set global variables
                BASE_URL="$PROTOCOL://$ES_HOST:$ES_PORT"
                
                echo "Connecting to Elasticsearch at: $BASE_URL"
                echo "TLS Enabled: $TLS_ENABLED"
                if [ "$TLS_ENABLED" = "true" ]; then
                    echo "Host Verification: $ENABLE_HOST_VERIFICATION"
                    echo "Client Auth Required: $REQUIRE_CLIENT_AUTH"
                fi
            }

            # Wait for Elasticsearch to be ready
            echo "Waiting for Elasticsearch to be ready..."
            build_es_connection

            # Check Elasticsearch health
            until curl $CURL_OPTS -s -f "$BASE_URL/_cluster/health?wait_for_status=yellow&timeout=5s" > /dev/null; do
                echo "Elasticsearch is not ready yet..."
                sleep 10
            done

            echo "Elasticsearch is ready!"
        env:
        # Basic Elasticsearch connection parameters
        - name: ES_HOST
          value: {{ $.Values.config.persistence.elasticsearch.hosts | quote }}
        - name: ES_PORT
          value: {{ $.Values.config.persistence.elasticsearch.port | default 9200 | quote }}
        - name: ES_PROTOCOL
          value: {{ $.Values.config.persistence.elasticsearch.protocol | default "" | quote }}
        - name: VISIBILITY_INDEX
          value: {{ $.Values.config.persistence.elasticsearch.visibilityIndex | quote }}
        - name: ES_VERSION
          value: {{ $.Values.config.persistence.elasticsearch.version | quote }}
        # Authentication parameters
        {{- if $.Values.config.persistence.elasticsearch.user }}
        - name: ES_USER
          value: {{ $.Values.config.persistence.elasticsearch.user | quote }}
        {{- end }}
        {{- if $.Values.config.persistence.elasticsearch.password }}
        - name: ES_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-{{ $serviceName }}-secrets
              key: ES_PWD
        {{- end }}
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ $.Values.config.persistence.elasticsearch.tls.enabled | quote }}
        {{- if $.Values.config.persistence.elasticsearch.tls.enabled }}
        - name: ENABLE_HOST_VERIFICATION
          value: {{ $.Values.config.persistence.elasticsearch.tls.enableHostVerification | quote }}
        - name: REQUIRE_CLIENT_AUTH
          value: {{ $.Values.config.persistence.elasticsearch.tls.requireClientAuth | quote }}
        # CA certificate file
        {{- if $.Values.config.persistence.elasticsearch.tls.caFile }}
        - name: SSL_CA_FILE
          value: {{ $.Values.config.persistence.elasticsearch.tls.caFile | quote }}
        {{- else if $.Values.config.persistence.elasticsearch.tls.caFiles }}
        - name: SSL_CA_FILE
          value: {{ index $.Values.config.persistence.elasticsearch.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if $.Values.config.persistence.elasticsearch.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ $.Values.config.persistence.elasticsearch.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if $.Values.config.persistence.elasticsearch.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ $.Values.config.persistence.elasticsearch.tls.keyFile | quote }}
        {{- end }}
        # Server name override
        {{- if $.Values.config.persistence.elasticsearch.tls.serverName }}
        - name: SSL_SERVER_NAME
          value: {{ $.Values.config.persistence.elasticsearch.tls.serverName | quote }}
        {{- end }}
      containers:
      - name: cadence-schema-elasticsearch
        {{- $globalImage := .Values.global.image | default dict }}
        {{- $schemaImage := $.Values.frontend.image | default dict }}
        {{- $repository := $schemaImage.repository | default $globalImage.repository }}
        {{- $tag := $schemaImage.tag | default $globalImage.tag }}
        image: {{ $repository }}:{{ $tag }}
        {{- $pullPolicy := $schemaImage.pullPolicy | default $globalImage.pullPolicy | default "IfNotPresent" }}
        imagePullPolicy: {{ $pullPolicy }}
        command:
          - sh
          - -c
          - |
            set -e
            echo "Starting ElasticSearch schema setup for driver: $DB_DRIVER"
            echo "=== Setting up ElasticSearch Schema ==="


            
        env:
        # Basic Elasticsearch connection parameters
        - name: ES_HOST
          value: {{ $.Values.config.persistence.elasticsearch.hosts | quote }}
        - name: ES_PORT
          value: {{ $.Values.config.persistence.elasticsearch.port | default 9200 | quote }}
        - name: ES_PROTOCOL
          value: {{ $.Values.config.persistence.elasticsearch.protocol | default "" | quote }}
        - name: VISIBILITY_INDEX
          value: {{ $.Values.config.persistence.elasticsearch.visibilityIndex | quote }}
        - name: ES_VERSION
          value: {{ $.Values.config.persistence.elasticsearch.version | quote }}
        # Authentication parameters
        {{- if $.Values.config.persistence.elasticsearch.user }}
        - name: ES_USER
          value: {{ $.Values.config.persistence.elasticsearch.user | quote }}
        {{- end }}
        {{- if $.Values.config.persistence.elasticsearch.password }}
        - name: ES_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-{{ $serviceName }}-secrets
              key: ES_PWD
        {{- end }}
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ $.Values.config.persistence.elasticsearch.tls.enabled | quote }}
        {{- if $.Values.config.persistence.elasticsearch.tls.enabled }}
        - name: ENABLE_HOST_VERIFICATION
          value: {{ $.Values.config.persistence.elasticsearch.tls.enableHostVerification | quote }}
        - name: REQUIRE_CLIENT_AUTH
          value: {{ $.Values.config.persistence.elasticsearch.tls.requireClientAuth | quote }}
        # CA certificate file
        {{- if $.Values.config.persistence.elasticsearch.tls.caFile }}
        - name: SSL_CA_FILE
          value: {{ $.Values.config.persistence.elasticsearch.tls.caFile | quote }}
        {{- else if $.Values.config.persistence.elasticsearch.tls.caFiles }}
        - name: SSL_CA_FILE
          value: {{ index $.Values.config.persistence.elasticsearch.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if $.Values.config.persistence.elasticsearch.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ $.Values.config.persistence.elasticsearch.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if $.Values.config.persistence.elasticsearch.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ $.Values.config.persistence.elasticsearch.tls.keyFile | quote }}
        {{- end }}
        # Server name override
        {{- if $.Values.config.persistence.elasticsearch.tls.serverName }}
        - name: SSL_SERVER_NAME
          value: {{ $.Values.config.persistence.elasticsearch.tls.serverName | quote }}
        {{- end }}
{{- end }}