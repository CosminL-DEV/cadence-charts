{{- if .Values.schema.createJob.enabled -}}
{{- $dbDriver := .Values.config.persistence.database.driver }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cadence.fullname" . }}-schema-create
  labels:
    {{- include "cadence.labels" . | nindent 4 }}
    app.kubernetes.io/component: schema-create
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "cadence.labels" . | nindent 8 }}
        app.kubernetes.io/component: schema-setup
    spec:
      {{- if $.Values.serviceAccount.create }}
      serviceAccountName: {{ include "cadence.serviceAccountName" $ }}
      {{- end }}
      {{- $globalImagePullSecrets := $.Values.global.imagePullSecrets | default list }}
      {{- $schemaImagePullSecrets := $.Values.frontend.imagePullSecrets | default list }}
      {{- $mergedImagePullSecrets := concat $globalImagePullSecrets $schemaImagePullSecrets }}
      {{- if $mergedImagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $mergedImagePullSecrets | nindent 8 }}
      {{- end }}
      {{- $globalNodeSelector := $.Values.global.nodeSelector | default dict }}
      {{- $schemaNodeSelector := $.Values.schema.nodeSelector | default $globalNodeSelector }}
      {{- if $schemaNodeSelector }}
      nodeSelector:
        {{- toYaml $schemaNodeSelector | nindent 8 }}
      {{- end }}
      {{- $globalAffinity := $.Values.global.affinity | default dict }}
      {{- $schemaAffinity := $.Values.schema.affinity | default $globalAffinity }}
      {{- if $schemaAffinity }}
      affinity:
        {{- toYaml $schemaAffinity | nindent 8 }}
      {{- end }}
      {{- $globalTolerations := $.Values.global.tolerations | default list }}
      {{- $schemaTolerations := $.Values.schema.tolerations | default $globalTolerations }}
      {{- if $schemaTolerations }}
      tolerations:
        {{- toYaml $schemaTolerations | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      containers:
      - name: cadence-schema-create
        {{- $globalImage := .Values.global.image | default dict }}
        {{- $schemaImage := $.Values.frontend.image | default dict }}
        {{- $repository := $schemaImage.repository | default $globalImage.repository }}
        {{- $tag := $schemaImage.tag | default $globalImage.tag }}
        image: {{ $repository }}:{{ $tag }}
        {{- $pullPolicy := $schemaImage.pullPolicy | default $globalImage.pullPolicy | default "IfNotPresent" }}
        imagePullPolicy: {{ $pullPolicy }}
        {{- if eq $dbDriver "cassandra" }}
        # Cassandra Schema Setup
        command:
          - sh
          - -c
          - |
            set -e
            echo "Starting Cadence schema setup for driver: $DB_DRIVER"
            echo "=== Setting up Cassandra Schema ==="
            
            # Build cassandra-tool command with TLS options
            build_cassandra_cmd() {
              local cmd="cadence-cassandra-tool --ep $DB_HOST"
              
              # Add authentication
              if [ -n "$DB_USER" ]; then
                cmd="$cmd -u $DB_USER"
              fi
              if [ -n "$CASSANDRA_PASSWORD" ]; then
                cmd="$cmd -pw $CASSANDRA_PASSWORD"
              fi

              # Add allowed authenticators from environment variable
              if [ -n "$ALLOWED_AUTHENTICATORS" ]; then
                cmd="$cmd $ALLOWED_AUTHENTICATORS"
              fi
              
              # Add TLS options if enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                cmd="$cmd --tls"
                if [ -n "$SSL_CERTFILE" ]; then
                  cmd="$cmd --tls-ca-file $SSL_CERTFILE"
                fi
                if [ -n "$SSL_CLIENT_CERT" ]; then
                  cmd="$cmd --tls-cert-file $SSL_CLIENT_CERT"
                fi
                if [ -n "$SSL_CLIENT_KEY" ]; then
                  cmd="$cmd --tls-key-file $SSL_CLIENT_KEY"
                fi
              fi
              
              echo "$cmd"
            }
            
            # Setup main database schema
            echo "Creating main keyspace: $DB_NAME"
            $(build_cassandra_cmd) create -k $DB_NAME --rf $REPLICATION_FACTOR
            
            echo "Setting up main schema version 0.0"
            $(build_cassandra_cmd) -k $DB_NAME setup-schema -v 0.0
            
            echo "Updating main schema to latest version"
            $(build_cassandra_cmd) -k $DB_NAME update-schema -d $CADENCE_HOME/schema/cassandra/cadence/versioned
            
            # Setup visibility database schema (only if ES is not enabled)
            if [ "$ES_ENABLED" = "false" ]; then
              echo "Creating visibility keyspace: $DB_VISIBILITY_NAME"
              $(build_cassandra_cmd) create -k $DB_VISIBILITY_NAME --rf $REPLICATION_FACTOR
              
              echo "Setting up visibility schema version 0.0"
              $(build_cassandra_cmd) -k $DB_VISIBILITY_NAME setup-schema -v 0.0
              
              echo "Updating visibility schema to latest version"
              $(build_cassandra_cmd) -k $DB_VISIBILITY_NAME update-schema -d $CADENCE_HOME/schema/cassandra/visibility/versioned
            else
              echo "Skipping visibility schema setup (Elasticsearch enabled)"
            fi

            echo "Schema setup completed successfully!"
        env:
        # Common environment variables
        - name: DB_DRIVER
          value: {{ $dbDriver | quote }}
        - name: CADENCE_HOME
          value: "/etc/cadence"
        - name: ES_ENABLED
          value: {{ .Values.config.persistence.elasticsearch.enabled | quote }}
        # Cassandra specific environment variables
        - name: DB_HOST
          value: {{ .Values.config.persistence.database.cassandra.hosts | quote }}
        - name: DB_NAME
          value: {{ .Values.config.persistence.database.cassandra.keyspace | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ .Values.config.persistence.database.cassandra.visibilityKeyspace | quote }}
        - name: REPLICATION_FACTOR
          value: {{ .Values.config.persistence.database.cassandra.replicationFactor | default 1 | quote }}
        # Allowed authenticators (build --aa parameters)
        - name: ALLOWED_AUTHENTICATORS
          value: {{ if .Values.config.persistence.database.cassandra.allowedAuthenticators }}{{ range $index, $auth := .Values.config.persistence.database.cassandra.allowedAuthenticators }}{{ if $index }} {{ end }}--aa {{ $auth | quote }}{{ end }}{{ else }}"--aa org.apache.cassandra.auth.PasswordAuthenticator"{{ end }}
        # Authentication parameters (conditional)
        {{- if .Values.config.persistence.database.cassandra.user }}
        - name: DB_USER
          value: {{ .Values.config.persistence.database.cassandra.user | quote }}
        {{- end }}
        {{- if .Values.config.persistence.database.cassandra.password }}
        - name: CASSANDRA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: CASSANDRA_PASSWORD
        {{- end }}
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ .Values.config.persistence.database.cassandra.tls.enabled | quote }}
        {{- if .Values.config.persistence.database.cassandra.tls.enabled }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if .Values.config.persistence.database.cassandra.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ .Values.config.persistence.database.cassandra.tls.caFile | quote }}
        {{- else if .Values.config.persistence.database.cassandra.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index .Values.config.persistence.database.cassandra.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if .Values.config.persistence.database.cassandra.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ .Values.config.persistence.database.cassandra.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if .Values.config.persistence.database.cassandra.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ .Values.config.persistence.database.cassandra.tls.keyFile | quote }}
        {{- end }}
        {{- end }}
    
        {{- else if eq $dbDriver "postgres" }}
        # PostgreSQL Schema Setup
        command:
          - sh
          - -c
          - |
            set -e
            echo "Starting Cadence schema setup for driver: $DB_DRIVER"
            echo "=== Setting up PostgreSQL Schema ==="
            
            # Build sql-tool command with TLS options
            build_postgres_cmd() {
              local cmd="cadence-sql-tool --ep $DB_HOST -p $DB_PORT -u $DB_USER -pw $POSTGRES_PWD --plugin postgres"
              
              # Add TLS options if enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                cmd="$cmd --tls"
                if [ -n "$SSL_CERTFILE" ]; then
                  cmd="$cmd --tls-ca-file $SSL_CERTFILE"
                fi
                if [ -n "$SSL_CLIENT_CERT" ]; then
                  cmd="$cmd --tls-cert-file $SSL_CLIENT_CERT"
                fi
                if [ -n "$SSL_CLIENT_KEY" ]; then
                  cmd="$cmd --tls-key-file $SSL_CLIENT_KEY"
                fi
              fi
              
              echo "$cmd"
            }
            
            # Create main database
            echo "Creating main database: $DB_NAME"
            $(build_postgres_cmd) create-database --db $DB_NAME
            
            echo "Setting up main schema version 0.0"
            $(build_postgres_cmd) --db $DB_NAME setup-schema -v 0.0
            
            echo "Updating main schema to latest version"
            $(build_postgres_cmd) --db $DB_NAME update-schema -d $CADENCE_HOME/schema/postgres/cadence/versioned
            
            # Setup visibility database (only if ES is not enabled)
            if [ "$ES_ENABLED" = "false" ]; then
              echo "Creating visibility database: $DB_VISIBILITY_NAME"
              $(build_postgres_cmd) create-database --db $DB_VISIBILITY_NAME
              
              echo "Setting up visibility schema version 0.0"
              $(build_postgres_cmd) --db $DB_VISIBILITY_NAME setup-schema -v 0.0
              
              echo "Updating visibility schema to latest version"
              $(build_postgres_cmd) --db $DB_VISIBILITY_NAME update-schema -d $CADENCE_HOME/schema/postgres/visibility/versioned
            else
              echo "Skipping visibility schema setup (Elasticsearch enabled)"
            fi

            echo "Schema setup completed successfully!"
        env:
        # Common environment variables
        - name: DB_DRIVER
          value: {{ $dbDriver | quote }}
        - name: CADENCE_HOME
          value: "/etc/cadence"
        - name: ES_ENABLED
          value: {{ .Values.config.persistence.elasticsearch.enabled | quote }}
        # PostgreSQL specific environment variables
        - name: DB_HOST
          value: {{ .Values.config.persistence.database.sql.hosts | quote }}
        - name: DB_PORT
          value: {{ .Values.config.persistence.database.postgres.port | default .Values.config.persistence.database.sql.port | default 5432 | quote }}
        - name: DB_NAME
          value: {{ .Values.config.persistence.database.sql.dbname | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ .Values.config.persistence.database.sql.visibilityDbname | quote }}
        - name: DB_USER
          value: {{ .Values.config.persistence.database.sql.user | quote }}
        # Authentication parameters
        - name: POSTGRES_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: POSTGRES_PWD
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ .Values.config.persistence.database.sql.tls.enabled | quote }}
        {{- if .Values.config.persistence.database.sql.tls.enabled }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if .Values.config.persistence.database.sql.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ .Values.config.persistence.database.sql.tls.caFile | quote }}
        {{- else if .Values.config.persistence.database.sql.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index .Values.config.persistence.database.sql.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ .Values.config.persistence.database.sql.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ .Values.config.persistence.database.sql.tls.keyFile | quote }}
        {{- end }}
        {{- end }}

        {{- else if eq $dbDriver "mysql" }}
        # MySQL Schema Setup
        command:
          - sh
          - -c
          - |
            set -e
            echo "Starting Cadence schema setup for driver: $DB_DRIVER"
            echo "=== Setting up MySQL Schema ==="
            
            # Build sql-tool command with TLS options
            build_mysql_cmd() {
              local cmd="cadence-sql-tool --ep $DB_HOST -p $DB_PORT -u $DB_USER -pw $MYSQL_PWD --plugin mysql"
              
              # Add TLS options if enabled
              if [ "$TLS_ENABLED" = "true" ]; then
                cmd="$cmd --tls"
                if [ -n "$SSL_CERTFILE" ]; then
                  cmd="$cmd --tls-ca-file $SSL_CERTFILE"
                fi
                if [ -n "$SSL_CLIENT_CERT" ]; then
                  cmd="$cmd --tls-cert-file $SSL_CLIENT_CERT"
                fi
                if [ -n "$SSL_CLIENT_KEY" ]; then
                  cmd="$cmd --tls-key-file $SSL_CLIENT_KEY"
                fi
              fi
              
              echo "$cmd"
            }
            
            # Create main database
            echo "Creating main database: $DB_NAME"
            $(build_mysql_cmd) create-database --db $DB_NAME
            
            echo "Setting up main schema version 0.0"
            $(build_mysql_cmd) --db $DB_NAME setup-schema -v 0.0
            
            echo "Updating main schema to latest version"
            $(build_mysql_cmd) --db $DB_NAME update-schema -d $CADENCE_HOME/schema/mysql/v8/cadence/versioned
            
            # Setup visibility database (only if ES is not enabled)
            if [ "$ES_ENABLED" = "false" ]; then
              echo "Creating visibility database: $DB_VISIBILITY_NAME"
              $(build_mysql_cmd) create-database --db $DB_VISIBILITY_NAME
              
              echo "Setting up visibility schema version 0.0"
              $(build_mysql_cmd) --db $DB_VISIBILITY_NAME setup-schema -v 0.0
              
              echo "Updating visibility schema to latest version"
              $(build_mysql_cmd) --db $DB_VISIBILITY_NAME update-schema -d $CADENCE_HOME/schema/mysql/v8/visibility/versioned
            else
              echo "Skipping visibility schema setup (Elasticsearch enabled)"
            fi
            
            echo "Schema setup completed successfully!"
        env:
        # Common environment variables
        - name: DB_DRIVER
          value: {{ $dbDriver | quote }}
        - name: CADENCE_HOME
          value: "/etc/cadence"
        - name: ES_ENABLED
          value: {{ .Values.config.persistence.elasticsearch.enabled | quote }}
        # MySQL specific environment variables
        - name: DB_HOST
          value: {{ .Values.config.persistence.database.sql.hosts | quote }}
        - name: DB_PORT
          value: {{ .Values.config.persistence.database.mysql.port | default .Values.config.persistence.database.sql.port | default 3306 | quote }}
        - name: DB_NAME
          value: {{ .Values.config.persistence.database.sql.dbname | quote }}
        - name: DB_VISIBILITY_NAME
          value: {{ .Values.config.persistence.database.sql.visibilityDbname | quote }}
        - name: DB_USER
          value: {{ .Values.config.persistence.database.sql.user | quote }}
        # Authentication parameters
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.fullname" $ }}-frontend-secrets
              key: MYSQL_PWD
        # TLS Configuration
        - name: TLS_ENABLED
          value: {{ .Values.config.persistence.database.sql.tls.enabled | quote }}
        {{- if .Values.config.persistence.database.sql.tls.enabled }}
        # SSL_CERTFILE environment variable (CA certificate)
        {{- if .Values.config.persistence.database.sql.tls.caFile }}
        - name: SSL_CERTFILE
          value: {{ .Values.config.persistence.database.sql.tls.caFile | quote }}
        {{- else if .Values.config.persistence.database.sql.tls.caFiles }}
        - name: SSL_CERTFILE
          value: {{ index .Values.config.persistence.database.sql.tls.caFiles 0 | quote }}
        {{- end }}
        # Client certificate for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.certFile }}
        - name: SSL_CLIENT_CERT
          value: {{ .Values.config.persistence.database.sql.tls.certFile | quote }}
        {{- end }}
        # Client private key for mutual TLS
        {{- if .Values.config.persistence.database.sql.tls.keyFile }}
        - name: SSL_CLIENT_KEY
          value: {{ .Values.config.persistence.database.sql.tls.keyFile | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        {{- with .Values.global.tls.volumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.schema.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      volumes:
      {{- with .Values.global.tls.volumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
{{- end }}