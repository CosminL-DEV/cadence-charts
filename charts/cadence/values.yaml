# -- Provide a name to override the name of the chart
nameOverride: ~
# -- Provide a name to override the full names of resources
fullnameOverride: ~

# Global configuration
global:
  # -- Global image configuration (shared only by Cadence Server services [frontend, worker, matching and history])
  image:
    repository: "docker.io/ubercadence/server"
    tag: "v1.2.16"
    pullPolicy: IfNotPresent
  
  # -- Image pull secrets for private registries
  imagePullSecrets: []
  # - name: myregistrykey

  # -- Global environment variables (shared only by Cadence Server services [frontend, worker, matching and history])
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Global secret environment variables (shared only by Cadence Server services [frontend, worker, matching and history])
  secretEnv: []
  # - name: GLOBAL_SECRET_ENV_VAR
  #   value: "value"
  
  # -- Global pod security context
  podSecurityContext: {}
    # runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000
    # seccompProfile:
    #   type: RuntimeDefault
  
  # -- Global container security context
  containerSecurityContext: {}
    # allowPrivilegeEscalation: false
    # readOnlyRootFilesystem: true
    # capabilities:
    #   drop:
    #     - ALL
  
  # -- Global affinity rules
  affinity: {}
  
  # -- Global tolerations
  tolerations: []
  
  # -- Global node selector
  nodeSelector: {}

  # -- Global logging configuration (shared only by Cadence Server services [frontend, worker, matching and history])
  log:
    # -- Enable stdout logging
    stdout: true
    # -- Logging level (debug, info, warn, error)
    level: "info"

  # -- Global priority class name for pod scheduling
  priorityClassName: ""
  
  # -- Global topology spread constraints
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

# Frontend service configuration
frontend:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of frontend replicas to deploy
  replicas: 1
  
  # -- Tchannel port of cadence frontend service. DO NOT CHANGE
  port: 7933
  # -- GRPC port of cadence frontend service. DO NOT CHANGE
  grpcPort: 7833

  # -- Environment variables for frontend service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for frontend service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for frontend service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
  
  # -- Resource limits and requests
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  
  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Usually false for single replica services
    minAvailable: 1
    # maxUnavailable: 1
  
  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}
  
  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}
  
  # -- Affinity rules (inherits from global if not specified)
  affinity: {}
  
  # -- Tolerations (inherits from global if not specified)
  tolerations: []
  
  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}
  
  # -- Additional pod annotations
  podAnnotations: {}
  
  # -- Additional pod labels
  podLabels: {}
  
  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""
  
  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# Matching service configuration
matching:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of matching replicas to deploy
  replicas: 1
  
  # -- Tchannel port of cadence matching service. DO NOT CHANGE
  port: 7935
  # -- GRPC port of cadence matching service. DO NOT CHANGE
  grpcPort: 7835

  # -- Environment variables for matching service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for matching service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for matching service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
  
  # -- Resource limits and requests
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  
  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Recommended for multi-replica services
    minAvailable: 2
    # maxUnavailable: 1
  
  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}
  
  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}
  
  # -- Affinity rules (inherits from global if not specified)
  affinity: {}
  
  # -- Tolerations (inherits from global if not specified)
  tolerations: []
  
  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}
  
  # -- Additional pod annotations
  podAnnotations: {}
  
  # -- Additional pod labels
  podLabels: {}
  
  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""
  
  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# History service configuration
history:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of history replicas to deploy
  replicas: 1
  
  # -- Tchannel port of cadence history service. DO NOT CHANGE
  port: 7934
  # -- GRPC port of cadence history service. DO NOT CHANGE
  grpcPort: 7834
  
  # -- Environment variables for history service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for history service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for history service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  
  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Recommended for multi-replica services
    minAvailable: 2
    # maxUnavailable: 1
  
  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}
  
  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}
  
  # -- Affinity rules (inherits from global if not specified)
  affinity: {}
  
  # -- Tolerations (inherits from global if not specified)
  tolerations: []
  
  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}
  
  # -- Additional pod annotations
  podAnnotations: {}
  
  # -- Additional pod labels
  podLabels: {}
  
  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""
  
  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# Worker service configuration
worker:
  # -- Image configuration (inherits from global if not specified)
  image: {}
    # repository: "docker.io/ubercadence/server"
    # tag: ""
    # pullPolicy: IfNotPresent
    # imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of worker replicas to deploy
  replicas: 1
  
  # -- Tchannel port of cadence worker service. DO NOT CHANGE
  port: 7939
  
  # -- Environment variables for worker service
  env: []
  # - name: ENV_VAR
  #   value: "value"

  # -- Secret environment variables for worker service
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for worker service
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  
  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false  # Usually false for single replica services
    minAvailable: 1
    # maxUnavailable: 0
  
  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}
  
  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}
  
  # -- Affinity rules (inherits from global if not specified)
  affinity: {}
  
  # -- Tolerations (inherits from global if not specified)
  tolerations: []
  
  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}
  
  # -- Additional pod annotations
  podAnnotations: {}
  
  # -- Additional pod labels
  podLabels: {}
  
  # -- Logging configuration (inherits from global log if not specified)
  log: {}
    # -- Enable stdout logging
    # stdout: true
    # -- Logging level (debug, info, warn, error)
    # level: "info"

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""
  
  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

# Web UI configuration
web:
  # -- Image configuration for Web UI
  image:
    repository: "docker.io/ubercadence/web"
    tag: "v4.0.3"
    pullPolicy: IfNotPresent
    imagePullSecrets: []
      # - name: myregistrykey

  # -- Number of web UI replicas to deploy
  replicas: 1
  
  # -- Environment variables for web UI
  env:
  - name: CADENCE_WEB_PORT
    value: "8088"

  # -- Secret environment variables for web UI
  secretEnv: []
  # - name: SECRET_ENV_VAR
  #   value: "value"

  # -- Deployment strategy for web UI
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Resource limits and requests
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  
  # -- Pod Disruption Budget
  podDisruptionBudget:
    enabled: false # Usually false for single replica services
    minAvailable: 1
    # maxUnavailable: 0
  
  # -- Pod security context (inherits from global if not specified)
  podSecurityContext: {}
  
  # -- Container security context (inherits from global if not specified)
  containerSecurityContext: {}
  
  # -- Affinity rules (inherits from global if not specified)
  affinity: {}
  
  # -- Tolerations (inherits from global if not specified)
  tolerations: []
  
  # -- Node selector (inherits from global if not specified)
  nodeSelector: {}
  
  # -- Additional pod annotations
  podAnnotations: {}
  
  # -- Additional pod labels
  podLabels: {}

  # -- Priority class name for pod scheduling (inherits from global if not specified)
  priorityClassName: ""
  
  # -- Topology spread constraints (inherits from global if not specified)
  topologySpreadConstraints: []

  # Service configuration
  service:
    # -- Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    # -- Service port
    port: 8088
    # -- NodePort (only if type is NodePort)
    nodePort: ~
    # -- LoadBalancer IP (only if type is LoadBalancer)
    loadBalancerIP: ~
    # -- LoadBalancer source ranges (only if type is LoadBalancer)
    loadBalancerSourceRanges: []
    # -- Service annotations
    annotations: {}
      # service.beta.kubernetes.io/aws-load-balancer-type: nlb

  # Cadence web ingress configuration (if needed)
  ingress:
    # -- Enable ingress
    enabled: false
    # -- Ingress class name
    className: ""
    # -- Ingress annotations
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # -- Ingress hosts configuration
    hosts: []
      # - host: cadence.example.com
      #   paths:
      #     - path: /
      #       pathType: Prefix
    # -- TLS configuration
    tls: []
      # - secretName: cadence-web-tls
      #   hosts:
      #     - cadence.example.com

# Service Account configuration
serviceAccount:
  # -- Enable service account creation
  create: true
  # -- Service account name (generated if not set)
  name: ""
  # -- Annotations for service account
  annotations: {}
  # -- Automatically mount service account token
  automountServiceAccountToken: true

# RBAC configuration
rbac:
  # -- Enable RBAC creation
  create: false

# Network Policies
networkPolicy:
  # -- Enable network policies
  enabled: false
  # -- Ingress rules
  ingress: []
  # -- Egress rules
  egress: []

# Metrics configuration
metrics:
  # -- Enable metrics collection
  enabled: true
  # -- Metrics port
  port: 9090
  # -- Metrics port name
  portName: metrics
  
  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    # -- Enable ServiceMonitor creation
    enabled: false
    # -- Additional labels for ServiceMonitor
    additionalLabels: {}
    # -- Annotations for ServiceMonitor
    annotations: {}
    # -- Namespace for ServiceMonitor (defaults to release namespace)
    namespace: ""
    # -- Joblabel for ServiceMonitor
    jobLabel: ""
    # -- Namespace selector for ServiceMonitor
    namespaceSelector: []
    # -- Scrape interval
    scrapeInterval: 15s
    # -- Honor labels from target (False if it's commented | True if it's uncomment)
    # honorLabels: true
    # -- Target labels to be added
    targetLabels: []
    # -- Relabeling configs
    relabelings: []
    # -- Metric relabeling configs
    metricRelabelings: []

# HorizontalPodAutoscaler configuration
autoscaling:
  # -- Enable HPA for frontend service
  frontend:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    # behavior:
    #   scaleDown:
    #     stabilizationWindowSeconds: 300
    #     policies:
    #     - type: Percent
    #       value: 50
    #       periodSeconds: 60
    #   scaleUp:
    #     stabilizationWindowSeconds: 60
    #     policies:
    #     - type: Percent
    #       value: 100
    #       periodSeconds: 15

  # -- Enable HPA for matching service
  matching:
    enabled: false
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  # -- Enable HPA for history service
  history:
    enabled: false
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  # -- Enable HPA for worker service
  worker:
    enabled: false
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80


#############################################
########### CADENCE CONFIGURATION ###########
#############################################

config:
  # Log configuration
  log:
    # -- Enable stdout logging (inherits from global.log if not specified)
    stdout: ~
    # -- Logging level: debug, info, warn, error (inherits from global.log if not specified)
    level: ~
    # -- Allow using environment variables for log configuration if you want a different log level for each server component.
    useEnvVars: false
  
  # Persistence configuration
  persistence:
    # -- Number of history shards for partitioning
    numHistoryShards: 4
    # -- Name of the default datastore
    defaultStore: "default"
    # -- Name of the visibility datastore
    visibilityStore: "visibility"
    # -- Name of the advanced visibility datastore (Elasticsearch)
    advancedVisibilityStore: "es-visibility"
    
    # Database configuration
    database:
      # -- Database driver: cassandra, mysql, postgres
      driver: "cassandra"
      
      # Cassandra configuration
      cassandra:
        # -- Cassandra hosts. Can reference Kubernetes services
        hosts: ""
        # -- Cassandra keyspace for main data
        keyspace: "cadence"
        # -- Cassandra keyspace for visibility data
        visibilityKeyspace: "cadence_visibility"
        # -- Cassandra username (optional)
        user: ""
        # -- Cassandra password (optional)
        password: ""
        # -- Cassandra protocol version
        protoVersion: 4
      
      # MySQL configuration
      mysql:
        # -- MySQL host. Can reference Kubernetes services
        hosts: ""
        # -- MySQL port
        port: 3306
        # -- Database name for main data
        dbname: "cadence"
        # -- Database name for visibility data
        visibilityDbname: "cadence_visibility"
        # -- MySQL username
        user: "cadence"
        # -- MySQL password
        password: ""
        # -- Enable transaction isolation compatibility mode
        txIsolationCompat: false
      
      # PostgreSQL configuration
      postgres:
        # -- PostgreSQL host. Can reference Kubernetes services
        hosts: ""
        # -- PostgreSQL port
        port: 5432
        # -- Database name for main data
        dbname: "cadence"
        # -- Database name for visibility data
        visibilityDbname: "cadence_visibility"
        # -- PostgreSQL username
        user: "cadence"
        # -- PostgreSQL password
        password: ""
        # -- Maximum number of connections
        maxConns: 20
        # -- Maximum number of idle connections
        maxIdleConns: 20
        # -- Maximum connection lifetime
        maxConnLifetime: "1h"
    
    # Elasticsearch configuration for advanced visibility
    elasticsearch:
      # -- Enable Elasticsearch for advanced visibility
      enabled: false
      # -- Elasticsearch version (v6, v7, v8)
      version: "v7"
      # -- Elasticsearch username
      user: ""
      # -- Elasticsearch password
      password: ""
      # -- Elasticsearch hosts. Can reference Kubernetes services
      hosts: ""
      # -- Elasticsearch port
      port: 9200
      # -- Elasticsearch visibility index name
      visibilityIndex: "cadence-visibility"
  
  # Ringpop configuration for service discovery
  ringpop:
    # -- Ringpop cluster name
    name: ""
    # -- Broadcast address for this node (usually auto-detected)
    broadcastAddress: ""
    # -- Bootstrap mode: dns, hosts
    bootstrapMode: "dns"
    # -- Bootstrap seeds
    seeds: ""
    # -- Maximum duration to wait for joining the ring
    maxJoinDuration: "30s"
  
  # Services configuration
  services:
    # -- IP address to bind services to
    bindOnIP: "0.0.0.0"
    
    # Metrics configuration
    metrics:
      # -- Metrics type: statsd, prometheus
      type: "prometheus"
      # StatsD configuration
      statsd:
        # -- StatsD endpoint. Can reference Kubernetes services
        endpoint: ""
        # -- Metric prefixes for each service
        prefixes:
          frontend: "cadence-frontend"
          matching: "cadence-matching"
          history: "cadence-history"
          worker: "cadence-worker"
      # Prometheus configuration
      prometheus:
        # -- Timer type: histogram, summary
        timerType: "histogram"
        # -- Additional prometheus endpoints
        endpoints: []
    
    # Pprof configuration
    pprof:
      # -- Enable pprof endpoints
      enabled: false
      # -- Pprof ports for each service
      ports:
        frontend: 6060
        matching: 6061
        history: 6062
        worker: 6063
  
  # Cluster configuration
  cluster:
    # -- Cluster redirection policy
    redirectionPolicy: "all-domain-apis-forwarding"
    # -- Failover version increment
    failoverVersionIncrement: 10
    # -- Primary cluster name
    primaryClusterName: "cluster0"
    # -- Current cluster name
    currentClusterName: "cluster0"
    # -- Whether this cluster is not the primary
    isNotPrimary: false
    
    # -- Primary frontend service name for cross-cluster communication
    primaryFrontendService: "cadence"
    # -- Secondary frontend service name for cross-cluster communication
    secondaryFrontendService: "cadence-secondary"
    
    # OAuth configuration for cross-cluster auth
    oauth:
      # -- Enable OAuth for cross-cluster communication
      enabled: false
      # -- OAuth private key for signing tokens
      privateKey: ""
      # -- OAuth public key for verifying tokens
      publicKey: ""
      # -- Maximum JWT token TTL in seconds
      maxJwtTTL: 86400
    
    # Global domain configuration
    globalDomain:
      # -- Enable global domain support
      enabled: false
  
  # Archival configuration
  archival:
    # History archival configuration
    history:
      # -- Archival status: enabled, disabled
      status: "disabled"
      # -- Enable reading from archives
      enableRead: false
      ### PENDING REVIEW FROM HERE (HISTORY SUB-BLOCK)
      # -- File mode for archived files
      fileMode: "0644"
      # -- Directory mode for archive directories
      dirMode: "0755"
      # -- Archive storage provider configuration
      provider:
        # -- Storage type: filestore, s3, gcs
        type: "filestore"
        # Filestore configuration
        filestore:
          # -- Base directory for file storage
          baseDir: "/var/lib/cadence/archive"
        # S3 configuration
        s3:
          # -- S3 region
          region: ""
          # -- S3 bucket name
          bucket: ""
          # -- S3 key prefix
          keyPrefix: "cadence-archive/"
        # GCS configuration
        gcs:
          # -- GCS bucket name
          bucket: ""
          # -- GCS key prefix
          keyPrefix: "cadence-archive/"
    
    # Visibility archival configuration
    visibility:
      # -- Archival status: enabled, disabled
      status: "disabled"
      # -- Enable reading from archives
      enableRead: false

      ### PENDIGN TO REVIEW FROM HERE (VISIBILITY SUB-BLOCK)
      # -- File mode for archived files
      fileMode: "0644"
      # -- Directory mode for archive directories
      dirMode: "0755"
      # -- Archive storage provider configuration
      provider:
        # -- Storage type: filestore, s3, gcs
        type: "filestore"
        # Filestore configuration
        filestore:
          # -- Base directory for file storage
          baseDir: "/var/lib/cadence/visibility-archive"
  
  # Domain defaults configuration
  domainDefaults:
    # -- Default archival settings for new domains
    archival:
      history:
        # -- Default history archival status
        status: "disabled"
        # -- Default history archival URI
        uri: ""
      visibility:
        # -- Default visibility archival status
        status: "disabled"
        # -- Default visibility archival URI
        uri: ""
  
  # Kafka configuration for async workflows
  kafka:
    # -- Enable Kafka for async workflows
    enabled: false
    # -- Kafka hosts. Can reference Kubernetes services
    hosts: ""
    # -- Kafka port
    port: 9092
    # -- Kafka visibility topic name
    visibilityTopic: "cadence-visibility"
    # TLS configuration (NOT TESTED)
    tls:
      # -- Enable TLS for Kafka connection
      enabled: false
      # -- Path to CA certificate file
      caFile: ""
      # -- Path to client certificate file
      certFile: ""
      # -- Path to client private key file
      keyFile: ""
      # -- Skip certificate verification
      skipVerify: false
    # SASL configuration (NOT TESTED)
    sasl:
      # -- Enable SASL authentication
      enabled: false
      # -- SASL mechanism: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512
      mechanism: "PLAIN"
      # -- SASL username
      username: ""
      # -- SASL password
      password: ""
  
  # Public client configuration
  publicClient:
    # -- Frontend service name for client connections
    frontendService: "cadence"
  
  # Dynamic configuration
  dynamicConfig:
    # -- Dynamic config file path inside the container
    filePath: "/etc/cadence/config/dynamicconfig/config.yaml"
    # -- Poll interval for dynamic config changes
    pollInterval: "60s"
  
  # Blob store configuration
  blobstore:
    # -- Output directory for blob storage
    outputDirectory: ""
  
  # Async workflow queues configuration
  asyncWorkflowQueues:
    # -- Enable async workflow queues
    enabled: false
    # Kafka queue configuration
    kafkaQueue:
      # -- Kafka topic for async workflows
      topic: "default-topic"

# Dynamic configuration
dynamicConfig:
  # -- Dynamic config values to be set in the Cadence server
  # List of keys can be found at https://pkg.go.dev/github.com/uber/cadence@v1.3.0/common/dynamicconfig/dynamicproperties
  values:
    history.workflowIDExternalRateLimitEnabled:
      - value: true


###############################################################
################### DATABASE CONFIGURATION ####################
# Use only if you want to deploy the database from this chart #
###############################################################

# Cassandra configuration
cassandra:
  # -- External Cassandra endpoint to connect to. Required when cassandra.deployment.enabled is set to false
  endpoint: ""
  
  schema:
    # -- Cassandra schema version of the Cadence keyspace to use
    version: "0.40"
    # -- Cassandra schema version of the Cadence visibility keyspace to use
    visibility_version: "0.9"
  
  deployment:
    # -- When enabled, a single instance Cassandra will be deployed as part of the Helm chart
    # -- When disabled, the Cassandra deployment is expected to be provided externally
    enabled: true
    
    image:
      repository: "cassandra"
      tag: "4.1.1"
      pullPolicy: IfNotPresent
    
    # -- Resource limits and requests for Cassandra
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 1Gi